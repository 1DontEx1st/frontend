diff --git a/node_modules/node-emoji/.travis.yml b/node_modules/node-emoji/.travis.yml
old mode 100644
new mode 100755
diff --git a/node_modules/node-emoji/LICENSE b/node_modules/node-emoji/LICENSE
old mode 100644
new mode 100755
diff --git a/node_modules/node-emoji/README.md b/node_modules/node-emoji/README.md
old mode 100644
new mode 100755
diff --git a/node_modules/node-emoji/index.js b/node_modules/node-emoji/index.js
old mode 100644
new mode 100755
diff --git a/node_modules/node-emoji/lib/emoji.js b/node_modules/node-emoji/lib/emoji.js
old mode 100644
new mode 100755
index d4df325..4bc32a6
--- a/node_modules/node-emoji/lib/emoji.js
+++ b/node_modules/node-emoji/lib/emoji.js
@@ -21,7 +21,7 @@ var trimSpaceRegex = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
  * @param  {string} str
  * @return {string}
  */
-function stripColons (str) {
+function stripColons(str) {
   var colonIndex = str.indexOf(':');
   if (colonIndex > -1) {
     // :emoji: (http://www.emoji-cheat-sheet.com/)
@@ -43,7 +43,7 @@ function stripColons (str) {
  * @param {string} str
  * @return {string}
  */
-function wrapColons (str) {
+function wrapColons(str) {
   return (typeof str === 'string' && str.length > 0) ? ':' + str + ':' : str;
 }
 
@@ -53,7 +53,7 @@ function wrapColons (str) {
  * @param {string} str
  * @return {string}
  */
-function ensureColons (str) {
+function ensureColons(str) {
   return (typeof str === 'string' && str[0] !== ':') ? wrapColons(str) : str;
 }
 
@@ -66,14 +66,14 @@ var nonSpacingRegex = new RegExp(NON_SPACING_MARK, 'g')
 
 // Remove the non-spacing-mark from the code, never send a stripped version
 // to the client, as it kills graphical emoticons.
-function stripNSB (code) {
-  return code.replace(nonSpacingRegex, '');
+function stripNSB(code) {
+  return code;
 };
 
 // Reversed hash table, where as emojiByName contains a { heart: '❤' }
 // dictionary emojiByCode contains { ❤: 'heart' }. The codes are normalized
 // to the text version.
-var emojiByCode = Object.keys(emojiByName).reduce(function(h,k) {
+var emojiByCode = Object.keys(emojiByName).reduce(function (h, k) {
   h[stripNSB(emojiByName[k])] = k;
   return h;
 }, {});
@@ -90,7 +90,7 @@ var Emoji = {
  * @param  {string} emoji
  * @return {string}
  */
-Emoji._get = function _get (emoji) {
+Emoji._get = function _get(emoji) {
   if (emojiByName.hasOwnProperty(emoji)) {
     return emojiByName[emoji];
   }
@@ -103,7 +103,7 @@ Emoji._get = function _get (emoji) {
  * @param  {string} emoji
  * @return {string}
  */
-Emoji.get = function get (emoji) {
+Emoji.get = function get(emoji) {
   emoji = stripColons(emoji);
 
   return Emoji._get(emoji);
@@ -114,7 +114,7 @@ Emoji.get = function get (emoji) {
  * @param {string} nameOrCode The emoji to find, either `coffee`, `:coffee:` or `☕`;
  * @return {object}
  */
-Emoji.find = function find (nameOrCode) {
+Emoji.find = function find(nameOrCode) {
   return Emoji.findByName(nameOrCode) || Emoji.findByCode(nameOrCode);
 };
 
@@ -123,7 +123,7 @@ Emoji.find = function find (nameOrCode) {
  * @param {string} name The emoji to find either `coffee` or `:coffee:`;
  * @return {object}
  */
-Emoji.findByName = function findByName (name) {
+Emoji.findByName = function findByName(name) {
   var stripped = stripColons(name);
   var emoji = emojiByName[stripped];
 
@@ -135,7 +135,7 @@ Emoji.findByName = function findByName (name) {
  * @param {string} code The emoji to find; for example `☕` or `☔`
  * @return {object}
  */
-Emoji.findByCode = function findByCode (code) {
+Emoji.findByCode = function findByCode(code) {
   var stripped = stripNSB(code);
   var name = emojiByCode[stripped];
 
@@ -149,7 +149,7 @@ Emoji.findByCode = function findByCode (code) {
  * @param {string} nameOrCode The emoji to validate, either `coffee`, `:coffee:` or `☕`;
  * @return {object}
  */
-Emoji.hasEmoji = function hasEmoji (nameOrCode) {
+Emoji.hasEmoji = function hasEmoji(nameOrCode) {
   return Emoji.hasEmojiByName(nameOrCode) || Emoji.hasEmojiByCode(nameOrCode);
 };
 
@@ -158,7 +158,7 @@ Emoji.hasEmoji = function hasEmoji (nameOrCode) {
  * @param {string} name The emoji to validate either `coffee` or `:coffee:`;
  * @return {object}
  */
-Emoji.hasEmojiByName = function hasEmojiByName (name) {
+Emoji.hasEmojiByName = function hasEmojiByName(name) {
   var result = Emoji.findByName(name);
   return !!result && result.key === stripColons(name);
 };
@@ -168,7 +168,7 @@ Emoji.hasEmojiByName = function hasEmojiByName (name) {
  * @param {string} code The emoji to validate; for example `☕` or `☔`
  * @return {object}
  */
-Emoji.hasEmojiByCode = function hasEmojiByCode (code) {
+Emoji.hasEmojiByCode = function hasEmojiByCode(code) {
   var result = Emoji.findByCode(code);
   return !!result && stripNSB(result.emoji) === stripNSB(code);
 };
@@ -179,7 +179,7 @@ Emoji.hasEmojiByCode = function hasEmojiByCode (code) {
  * @param  {boolean} includeColons should the result include the ::
  * @return {string}
  */
-Emoji.which = function which (emoji_code, includeColons) {
+Emoji.which = function which(emoji_code, includeColons) {
   var code = stripNSB(emoji_code);
   var word = emojiByCode[code];
 
@@ -193,35 +193,35 @@ Emoji.which = function which (emoji_code, includeColons) {
  * @param  {function} format (wrap the returned emoji in a custom element)
  * @return {string}
  */
-Emoji.emojify = function emojify (str, on_missing, format) {
+Emoji.emojify = function emojify(str, on_missing, format) {
   if (!str) return '';
 
   return str.split(emojiNameRegex) // parse emoji via regex
-            .map(function parseEmoji(s, i) {
-              // every second element is an emoji, e.g. "test :fast_forward:" -> [ "test ", "fast_forward" ]
-              if (i % 2 === 0) return s;
-              var emoji = Emoji._get(s);
-              var isMissing = emoji.indexOf(':') > -1;
-
-              if (isMissing && typeof on_missing === 'function') {
-                return on_missing(s);
-              }
-
-              if (!isMissing && typeof format === 'function') {
-                return format(emoji, s);
-              }
-
-              return emoji;
-            })
-            .join('') // convert back to string
-  ;
+    .map(function parseEmoji(s, i) {
+      // every second element is an emoji, e.g. "test :fast_forward:" -> [ "test ", "fast_forward" ]
+      if (i % 2 === 0) return s;
+      var emoji = Emoji._get(s);
+      var isMissing = emoji.indexOf(':') > -1;
+
+      if (isMissing && typeof on_missing === 'function') {
+        return on_missing(s);
+      }
+
+      if (!isMissing && typeof format === 'function') {
+        return format(emoji, s);
+      }
+
+      return emoji;
+    })
+    .join('') // convert back to string
+    ;
 };
 
 /**
  * return a random emoji
  * @return {string}
  */
-Emoji.random = function random () {
+Emoji.random = function random() {
   var emojiKeys = Object.keys(emojiByName);
   var randomIndex = Math.floor(Math.random() * emojiKeys.length);
   var key = emojiKeys[randomIndex];
@@ -234,13 +234,13 @@ Emoji.random = function random () {
  *  @param {string} str
  *  @return {Array.<Object>}
  */
-Emoji.search = function search (str) {
+Emoji.search = function search(str) {
   var emojiKeys = Object.keys(emojiByName);
   var matcher = stripColons(str)
-  var matchingKeys = emojiKeys.filter(function(key) {
+  var matchingKeys = emojiKeys.filter(function (key) {
     return key.toString().indexOf(matcher) === 0;
   });
-  return matchingKeys.map(function(key) {
+  return matchingKeys.map(function (key) {
     return {
       key: key,
       emoji: Emoji._get(key),
@@ -253,11 +253,11 @@ Emoji.search = function search (str) {
  * @param  {string} str
  * @return {string}
  */
-Emoji.unemojify = function unemojify (str) {
+Emoji.unemojify = function unemojify(str) {
   if (!str) return '';
   var words = toArray(str);
 
-  return words.map(function(word) {
+  return words.map(function (word) {
     return Emoji.which(word, true) || word;
   }).join('');
 };
@@ -269,13 +269,13 @@ Emoji.unemojify = function unemojify (str) {
  * @param {boolean} should trailing whitespaces be cleaned? Defaults false
  * @return {string}
  */
-Emoji.replace = function replace (str, replacement, cleanSpaces) {
+Emoji.replace = function replace(str, replacement, cleanSpaces) {
   if (!str) return '';
 
-  var replace = typeof replacement === 'function' ? replacement : function() { return replacement; };
+  var replace = typeof replacement === 'function' ? replacement : function () { return replacement; };
   var words = toArray(str);
 
-  var replaced = words.map(function(word, idx) {
+  var replaced = words.map(function (word, idx) {
     var emoji = Emoji.findByCode(word);
 
     if (emoji && cleanSpaces && words[idx + 1] === ' ') {
@@ -294,7 +294,7 @@ Emoji.replace = function replace (str, replacement, cleanSpaces) {
  * @param {string} str
  * @return {string}
  */
-Emoji.strip = function strip (str) {
+Emoji.strip = function strip(str) {
   return Emoji.replace(str, '', true);
 };
 
diff --git a/node_modules/node-emoji/lib/emoji.json b/node_modules/node-emoji/lib/emoji.json
old mode 100644
new mode 100755
diff --git a/node_modules/node-emoji/lib/emojifile.js b/node_modules/node-emoji/lib/emojifile.js
old mode 100644
new mode 100755
diff --git a/node_modules/node-emoji/lib/emojiparse.js b/node_modules/node-emoji/lib/emojiparse.js
old mode 100644
new mode 100755
diff --git a/node_modules/node-emoji/test/emoji.js b/node_modules/node-emoji/test/emoji.js
old mode 100644
new mode 100755
